// Функция, която прави повторни опити да изпълни дадена функция за промис с определен брой опити
async function retryPromise(promiseFunc, retries = 3) {
  // Цикъл, който се изпълнява до броя опити за повторение
  for (let i = 0; i < retries; i++) {
    try {
      // Опитва да изпълни дадената функция за промис
      const result = await promiseFunc();
      // Ако успее, връща получения резултат
      return result;
    } catch (error) {
      // Ако изпълнението на промиса се провали, проверява дали това е последният опит
      if (i === retries - 1) throw error;
    }
  }
}

// Функция, която връща промис, който е нестабилен и може да се разреши или отхвърли
const unstablePromise = () => new Promise((resolve, reject) => {
  // Генерира случайно число между 0 и 1 и в зависимост от това, дали е по-голямо от 0.5,
  // разрешава или отхвърля промиса
  Math.random() > 0.5 ? resolve("Success!") : reject(new Error("Failure!"));
});

// Функция, която стартира процеса на повторение на нестабилния промис и обработва резултата или грешката
function startRetry() {
  // Извиква функцията за повторение, подавайки й нестабилния промис като аргумент
  retryPromise(unstablePromise)
    // Обработва успешния резултат от промиса
    .then(result => console.log(`Result: ${result}`))
    // Обработва грешката от промиса
    .catch(error => console.error(`Error: ${error.message}`));
}

// Прикрепя функцията за стартиране на повторението към глобалния обект window, за да може да се извика директно от HTML документа
window.startRetry = startRetry;
